#!/usr/bin/env python3
"""
Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è Face Comparison Service
"""
import requests
import json
import logging
from datetime import datetime
from typing import Dict, Any, Optional
from .config import config

logger = logging.getLogger(__name__)

class TelegramNotifier:
    """–ö–ª–∞—Å—Å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ Telegram"""
    
    def __init__(self):
        self.bot_token = config.TELEGRAM_BOT_TOKEN
        self.chat_id = config.TELEGRAM_CHAT_ID
        self.enabled = config.TELEGRAM_ENABLED and config.is_telegram_configured()
        
        if self.enabled:
            logger.info("‚úÖ Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω—ã")
        else:
            logger.warning("‚ö†Ô∏è Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
    
    def send_message(self, message: str, parse_mode: str = "HTML") -> bool:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram"""
        if not self.enabled:
            return False
            
        try:
            url = f"https://api.telegram.org/bot{self.bot_token}/sendMessage"
            data = {
                "chat_id": self.chat_id,
                "text": message,
                "parse_mode": parse_mode
            }
            
            response = requests.post(url, json=data, timeout=10)
            
            if response.status_code == 200:
                logger.debug("üì§ Telegram —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
                return True
            else:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram: {response.status_code}")
                return False
                
        except Exception as e:
            logger.error(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ Telegram: {e}")
            return False
    
    def notify_spoofing_detected(self, image_info: str, confidence: float):
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–∏ –ø–æ–¥–¥–µ–ª–∫–∏"""
        if not config.NOTIFY_ON_SPOOFING:
            return
            
        message = f"""
üö® <b>–û–ë–ù–ê–†–£–ñ–ï–ù–ê –ü–û–î–î–ï–õ–ö–ê –õ–ò–¶–ê!</b>

üì∏ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {image_info}
ÔøΩÔøΩ –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {confidence:.2%}
‚è∞ –í—Ä–µ–º—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}

‚ö†Ô∏è –í–æ–∑–º–æ–∂–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –æ–±–º–∞–Ω–∞ —Å–∏—Å—Ç–µ–º—ã!
"""
        self.send_message(message)
    
    def notify_low_confidence(self, image_info: str, confidence: float):
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∏–∑–∫–æ–π —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏"""
        if not config.NOTIFY_ON_LOW_CONFIDENCE:
            return
            
        message = f"""
‚ö†Ô∏è <b>–ù–ò–ó–ö–ê–Ø –£–í–ï–†–ï–ù–ù–û–°–¢–¨ –ê–ù–¢–ò–°–ü–£–§–ò–ù–ì–ê</b>

üì∏ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {image_info}
üéØ –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {confidence:.2%}
‚è∞ –í—Ä–µ–º—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}

üîç –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
"""
        self.send_message(message)
    
    def notify_comparison_result(self, similarity: float, verified: bool, processing_time: float):
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è"""
        status = "‚úÖ –í–ï–†–ò–§–ò–¶–ò–†–û–í–ê–ù" if verified else "‚ùå –ù–ï –í–ï–†–ò–§–ò–¶–ò–†–û–í–ê–ù"
        
        message = f"""
üìä <b>–†–ï–ó–£–õ–¨–¢–ê–¢ –°–†–ê–í–ù–ï–ù–ò–Ø –õ–ò–¶</b>

{status}
üéØ –°—Ö–æ–¥—Å—Ç–≤–æ: {similarity:.2%}
‚è±Ô∏è –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {processing_time:.3f}—Å
‚è∞ –í—Ä–µ–º—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}
"""
        self.send_message(message)
    
    def notify_error(self, error_type: str, error_message: str):
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ"""
        if not config.NOTIFY_ON_ERRORS:
            return
            
        message = f"""
üî¥ <b>–û–®–ò–ë–ö–ê –°–ò–°–¢–ï–ú–´</b>

üè∑Ô∏è –¢–∏–ø: {error_type}
üìù –°–æ–æ–±—â–µ–Ω–∏–µ: {error_message}
‚è∞ –í—Ä–µ–º—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}

üîß –¢—Ä–µ–±—É–µ—Ç—Å—è –≤–Ω–∏–º–∞–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
"""
        self.send_message(message)
    
    def notify_high_volume(self, requests_count: int, time_window: int):
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –≤—ã—Å–æ–∫–æ–π –Ω–∞–≥—Ä—É–∑–∫–µ"""
        if not config.NOTIFY_ON_HIGH_VOLUME:
            return
            
        message = f"""
üìà <b>–í–´–°–û–ö–ê–Ø –ù–ê–ì–†–£–ó–ö–ê –ù–ê –°–ò–°–¢–ï–ú–£</b>

üìä –ó–∞–ø—Ä–æ—Å–æ–≤: {requests_count}
‚è±Ô∏è –ó–∞ –ø–µ—Ä–∏–æ–¥: {time_window} —Å–µ–∫
‚è∞ –í—Ä–µ–º—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}

‚ö° –°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ —Ä–µ–∂–∏–º–µ –ø–æ–≤—ã—à–µ–Ω–Ω–æ–π –Ω–∞–≥—Ä—É–∑–∫–∏
"""
        self.send_message(message)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
telegram_notifier = TelegramNotifier()
