#!/usr/bin/env python3
"""
–¢–µ—Å—Ç API —Å –Ω–æ–≤—ã–º–∏ URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
"""
import requests
import json
import time

def test_new_platon_urls():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç API —Å –Ω–æ–≤—ã–º–∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–º–∏ URL"""
    base_url = "http://localhost:8000"
    
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Face Comparison Service —Å –Ω–æ–≤—ã–º–∏ URL")
    print("=" * 60)
    
    # –ù–æ–≤—ã–µ URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    url1 = "https://proctoring.platon.uz/media/images/user_image/ff808181efa3b9499f2a071b.jpeg"
    url2 = "https://proctoring.platon.uz/media/images/user_image/ff8081812aebb26799faf70d.jpeg"
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ health —Å–µ—Ä–≤–∏—Å–∞
    print("\nüè• –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ä–≤–∏—Å–∞...")
    try:
        health_response = requests.get(f"{base_url}/api/v1/health", timeout=5)
        if health_response.status_code == 200:
            health_data = health_response.json()
            print(f"‚úÖ –°–µ—Ä–≤–∏—Å —Ä–∞–±–æ—Ç–∞–µ—Ç: {health_data.get('status', 'unknown')}")
            print(f"   –ú–æ–¥–µ–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω–∞: {health_data.get('models_loaded', False)}")
        else:
            print(f"‚ùå –ü—Ä–æ–±–ª–µ–º–∞ —Å —Å–µ—Ä–≤–∏—Å–æ–º: {health_response.status_code}")
            return
    except Exception as e:
        print(f"‚ùå –°–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
        return
    
    # –¢–µ—Å—Ç 1: –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –¥–≤—É—Ö –Ω–æ–≤—ã—Ö URL
    print(f"\nüéØ –¢–µ—Å—Ç 1: –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –¥–≤—É—Ö –Ω–æ–≤—ã—Ö URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
    print(f"URL 1: {url1}")
    print(f"URL 2: {url2}")
    
    payload1 = {
        "image1": url1,
        "image2": url2,
        "image1_type": "url",
        "image2_type": "url",
        "model": "ArcFace",
        "metric": "cosine"
    }
    
    try:
        start_time = time.time()
        print("–û—Ç–ø—Ä–∞–≤–ª—è—é –∑–∞–ø—Ä–æ—Å...")
        
        response1 = requests.post(
            f"{base_url}/api/v1/compare",
            json=payload1,
            timeout=60
        )
        
        request_time = time.time() - start_time
        print(f"–í—Ä–µ–º—è –∑–∞–ø—Ä–æ—Å–∞: {request_time:.2f}—Å")
        print(f"–°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: {response1.status_code}")
        
        if response1.status_code == 200:
            data1 = response1.json()
            print("‚úÖ –£—Å–ø–µ—à–Ω–æ!")
            print(f"   –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è: {data1.get('verified', 'N/A')}")
            similarity = data1.get('similarity', 0)
            print(f"   –°—Ö–æ–¥—Å—Ç–≤–æ: {similarity:.2%}")
            print(f"   –î–∏—Å—Ç–∞–Ω—Ü–∏—è: {data1.get('distance', 'N/A'):.4f}")
            print(f"   –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {data1.get('processing_time', 'N/A'):.3f}—Å")
            print(f"   –ú–æ–¥–µ–ª—å: {data1.get('model_used', 'N/A')}")
            
            # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –ª–∏—Ü–∞—Ö
            faces_info = data1.get('faces_detected', {})
            print(f"   –õ–∏—Ü–∞ –Ω–∞–π–¥–µ–Ω—ã: {{'image1': {faces_info.get('image1', 0)}, 'image2': {faces_info.get('image2', 0)}}}")
            
        else:
            print("‚ùå –û—à–∏–±–∫–∞!")
            try:
                error_data = response1.json()
                print(f"   –î–µ—Ç–∞–ª–∏: {error_data}")
            except:
                print(f"   HTTP Error: {response1.status_code}")
                print(f"   –û—Ç–≤–µ—Ç: {response1.text[:200]}")
                
    except requests.RequestException as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {e}")
    except Exception as e:
        print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
    
    # –¢–µ—Å—Ç 2: –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø–µ—Ä–≤–æ–≥–æ URL —Å —Å–∞–º–∏–º —Å–æ–±–æ–π (–¥–æ–ª–∂–Ω–æ –¥–∞—Ç—å 100% —Å—Ö–æ–¥—Å—Ç–≤–æ)
    print(f"\nüéØ –¢–µ—Å—Ç 2: –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å —Å–∞–º–∏–º —Å–æ–±–æ–π")
    print(f"URL: {url1}")
    
    payload2 = {
        "image1": url1,
        "image2": url1,
        "image1_type": "url",
        "image2_type": "url",
        "model": "ArcFace",
        "metric": "cosine"
    }
    
    try:
        response2 = requests.post(
            f"{base_url}/api/v1/compare",
            json=payload2,
            timeout=60
        )
        
        print(f"–°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: {response2.status_code}")
        
        if response2.status_code == 200:
            data2 = response2.json()
            print("‚úÖ –£—Å–ø–µ—à–Ω–æ!")
            print(f"   –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è: {data2.get('verified', 'N/A')}")
            similarity = data2.get('similarity', 0)
            print(f"   –°—Ö–æ–¥—Å—Ç–≤–æ: {similarity:.2%}")
            print(f"   –î–∏—Å—Ç–∞–Ω—Ü–∏—è: {data2.get('distance', 'N/A'):.4f}")
        else:
            print("‚ùå –û—à–∏–±–∫–∞!")
            try:
                error_data = response2.json()
                print(f"   –î–µ—Ç–∞–ª–∏: {error_data}")
            except:
                print(f"   HTTP Error: {response2.status_code}")
                
    except requests.RequestException as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {e}")
    except Exception as e:
        print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")

    print(f"\nüéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")

if __name__ == "__main__":
    test_new_platon_urls() 