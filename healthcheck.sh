#!/bin/bash

# Health check script –¥–ª—è Face Comparison Service
# –§–∞–π–ª: healthcheck.sh

HEALTH_URL="http://localhost:8000/api/v1/health"
SERVICE_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
LOG_FILE="$SERVICE_DIR/logs/health.log"
RESTART_THRESHOLD=${RESTART_THRESHOLD:-3}
RESTART_COOLDOWN=${RESTART_COOLDOWN:-300}  # 5 –º–∏–Ω—É—Ç
STATE_FILE="/tmp/face-comparison-health-state"

# –°–æ–∑–¥–∞–µ–º –ª–æ–≥ —Ñ–∞–π–ª –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
mkdir -p $(dirname "$LOG_FILE")
touch "$LOG_FILE"

# –§—É–Ω–∫—Ü–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
log() {
    echo "$(date '+%Y-%m-%d %H:%M:%S') - $1" | tee -a "$LOG_FILE"
}

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–∑ —Ñ–∞–π–ª–∞
get_failure_count() {
    if [ -f "$STATE_FILE" ]; then
        local line=$(head -1 "$STATE_FILE")
        echo "${line%%:*}"
    else
        echo "0"
    fi
}

get_last_restart() {
    if [ -f "$STATE_FILE" ]; then
        local line=$(head -1 "$STATE_FILE")
        echo "${line##*:}"
    else
        echo "0"
    fi
}

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
save_state() {
    local failures=$1
    local last_restart=$2
    echo "$failures:$last_restart" > "$STATE_FILE"
}

# –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Telegram
send_notification() {
    local message=$1
    local severity=${2:-"warning"}
    
    if [ -n "$TELEGRAM_BOT_TOKEN" ] && [ -n "$TELEGRAM_CHAT_ID" ]; then
        local emoji
        case $severity in
            "info") emoji="‚ÑπÔ∏è" ;;
            "warning") emoji="‚ö†Ô∏è" ;;
            "error") emoji="‚ùå" ;;
            "critical") emoji="üö®" ;;
            "success") emoji="‚úÖ" ;;
            *) emoji="üìã" ;;
        esac
        
        curl -s -X POST "https://api.telegram.org/bot$TELEGRAM_BOT_TOKEN/sendMessage" \
            -d chat_id="$TELEGRAM_CHAT_ID" \
            -d text="$emoji Face Comparison Service ($(hostname)): $message" \
            > /dev/null 2>&1 || true
    fi
}

# –û—Å–Ω–æ–≤–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è
health_check() {
    local current_time=$(date +%s)
    local failure_count=$(get_failure_count)
    local last_restart=$(get_last_restart)
    
    log "–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–∏—Å–∞..."
    
    # –ë–∞–∑–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ API
    if ! curl -f -s -m 10 "$HEALTH_URL" > /dev/null 2>&1; then
        failure_count=$((failure_count + 1))
        log "‚ùå API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (–ø–æ–ø—ã—Ç–∫–∞ $failure_count/$RESTART_THRESHOLD)"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å–ª–∏—à–∫–æ–º –ª–∏ –Ω–µ–¥–∞–≤–Ω–æ –±—ã–ª –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫
        local time_since_restart=$((current_time - last_restart))
        
        if [ $failure_count -ge $RESTART_THRESHOLD ] && [ $time_since_restart -gt $RESTART_COOLDOWN ]; then
            log "üîÑ –ò–Ω–∏—Ü–∏–∏—Ä—É–µ–º –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–∞..."
            send_notification "–°–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫" "error"
            
            if restart_service; then
                save_state "0" "$current_time"
                log "‚úÖ –°–µ—Ä–≤–∏—Å —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω"
                send_notification "–°–µ—Ä–≤–∏—Å —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω" "success"
                return 0
            else
                log "üí• –ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–µ—Ä–≤–∏—Å"
                send_notification "–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–µ—Ä–≤–∏—Å!" "critical"
                save_state "$failure_count" "$last_restart"
                return 1
            fi
            
        elif [ $time_since_restart -le $RESTART_COOLDOWN ]; then
            log "‚è≥ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –Ω–µ–¥–∞–≤–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω, –æ–∂–∏–¥–∞–µ–º..."
            save_state "$failure_count" "$last_restart"
            
        else
            save_state "$failure_count" "$last_restart"
        fi
        
        return 1
    fi
    
    # –î–µ—Ç–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ health endpoint
    local health_response
    health_response=$(curl -s -m 10 "$HEALTH_URL" 2>/dev/null)
    
    if [ $? -eq 0 ] && [ -n "$health_response" ]; then
        # –ü–∞—Ä—Å–∏–º JSON –æ—Ç–≤–µ—Ç (–ø—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞)
        if echo "$health_response" | grep -q '"status":"healthy"'; then
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ InsightFace –º–æ–¥–µ–ª–∏
            local model_status="–Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω"
            if echo "$health_response" | grep -q '"models_loaded":true'; then
                model_status="–∑–∞–≥—Ä—É–∂–µ–Ω–∞"
            elif echo "$health_response" | grep -q '"models_loaded":false'; then
                model_status="–Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞"
                log "‚ö†Ô∏è InsightFace –º–æ–¥–µ–ª—å –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞"
                send_notification "InsightFace –º–æ–¥–µ–ª—å –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞" "warning"
            fi
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            local total_comparisons=$(echo "$health_response" | grep -o '"total_comparisons":[0-9]*' | cut -d':' -f2)
            local success_rate=$(echo "$health_response" | grep -o '"success_rate":[0-9.]*' | cut -d':' -f2)
            local avg_response_time=$(echo "$health_response" | grep -o '"average_response_time":[0-9.]*' | cut -d':' -f2)
            
            log "‚úÖ –°–µ—Ä–≤–∏—Å —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ (InsightFace: $model_status)"
            log "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: —Å—Ä–∞–≤–Ω–µ–Ω–∏–π=$total_comparisons, —É—Å–ø–µ—à–Ω–æ—Å—Ç—å=${success_rate}%, –≤—Ä–µ–º—è=${avg_response_time}—Å"
            
            # –°–±—Ä–æ—Å —Å—á–µ—Ç—á–∏–∫–∞ –æ—à–∏–±–æ–∫ –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–µ
            if [ "$failure_count" -gt 0 ]; then
                log "üîÑ –°–±—Ä–æ—Å —Å—á–µ—Ç—á–∏–∫–∞ –æ—à–∏–±–æ–∫"
                save_state "0" "$last_restart"
            fi
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
            if [ -n "$success_rate" ] && [ "${success_rate%.*}" -lt 90 ] && [ -n "$total_comparisons" ] && [ "$total_comparisons" -gt 10 ]; then
                log "‚ö†Ô∏è –ù–∏–∑–∫–∞—è —É—Å–ø–µ—à–Ω–æ—Å—Ç—å —Å—Ä–∞–≤–Ω–µ–Ω–∏–π: ${success_rate}%"
                send_notification "–ù–∏–∑–∫–∞—è —É—Å–ø–µ—à–Ω–æ—Å—Ç—å —Å—Ä–∞–≤–Ω–µ–Ω–∏–π: ${success_rate}%" "warning"
            fi
            
            if [ -n "$avg_response_time" ] && [ "${avg_response_time%.*}" -gt 10 ]; then
                log "‚ö†Ô∏è –í—ã—Å–æ–∫–æ–µ –≤—Ä–µ–º—è –æ—Ç–∫–ª–∏–∫–∞: ${avg_response_time}—Å"
                send_notification "–í—ã—Å–æ–∫–æ–µ –≤—Ä–µ–º—è –æ—Ç–∫–ª–∏–∫–∞: ${avg_response_time}—Å" "warning"
            fi
            
            return 0
            
        else
            log "‚ö†Ô∏è Health endpoint –æ—Ç–≤–µ—á–∞–µ—Ç, –Ω–æ —Å—Ç–∞—Ç—É—Å –Ω–µ healthy"
            failure_count=$((failure_count + 1))
            save_state "$failure_count" "$last_restart"
            return 1
        fi
        
    else
        log "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç health endpoint"
        failure_count=$((failure_count + 1))
        save_state "$failure_count" "$last_restart"
        return 1
    fi
}

# –§—É–Ω–∫—Ü–∏—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–∏—Å–∞
restart_service() {
    log "–ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–∏—Å–∞..."
    
    cd "$SERVICE_DIR" || {
        log "‚ùå –ù–µ —É–¥–∞–µ—Ç—Å—è –ø–µ—Ä–µ–π—Ç–∏ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é —Å–µ—Ä–≤–∏—Å–∞: $SERVICE_DIR"
        return 1
    }
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º startup.sh –¥–ª—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞
    if [ -x "./startup.sh" ]; then
        timeout 600 ./startup.sh restart
        return $?
    else
        # Fallback –∫ docker-compose
        log "startup.sh –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º docker-compose..."
        docker-compose restart
        sleep 30
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å–µ—Ä–≤–∏—Å –∑–∞–ø—É—Å—Ç–∏–ª—Å—è
        if curl -f -s -m 10 "$HEALTH_URL" > /dev/null 2>&1; then
            return 0
        else
            return 1
        fi
    fi
}

# –§—É–Ω–∫—Ü–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Ä–µ—Å—É—Ä—Å–æ–≤
monitor_resources() {
    local memory_usage
    local disk_usage
    local cpu_usage
    
    # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–º
    if command -v docker >/dev/null 2>&1; then
        memory_usage=$(docker stats --no-stream --format "table {{.MemUsage}}" face-comparison-service 2>/dev/null | tail -1 | grep -o '[0-9.]*GiB' | head -1)
        if [ -n "$memory_usage" ]; then
            log "üíæ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏: $memory_usage"
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—ã—Å–æ–∫–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–∞–º—è—Ç–∏ (–±–æ–ª–µ–µ 4GB)
            local mem_value=$(echo "$memory_usage" | grep -o '[0-9.]*')
            if [ -n "$mem_value" ] && [ "${mem_value%.*}" -gt 4 ]; then
                log "‚ö†Ô∏è –í—ã—Å–æ–∫–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏: $memory_usage"
                send_notification "–í—ã—Å–æ–∫–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏: $memory_usage" "warning"
            fi
        fi
    fi
    
    # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –¥–∏—Å–∫–∞
    disk_usage=$(df -h "$(pwd)" | tail -1 | awk '{print $5}' | sed 's/%//')
    if [ "$disk_usage" -gt 90 ]; then
        log "‚ö†Ô∏è –í—ã—Å–æ–∫–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –¥–∏—Å–∫–∞: ${disk_usage}%"
        send_notification "–í—ã—Å–æ–∫–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –¥–∏—Å–∫–∞: ${disk_usage}%" "warning"
    fi
}

# –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
main() {
    # –°–æ–∑–¥–∞–µ–º lock file –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
    local lock_file="/tmp/face-comparison-healthcheck.lock"
    
    if [ -f "$lock_file" ]; then
        local lock_pid=$(cat "$lock_file")
        if kill -0 "$lock_pid" 2>/dev/null; then
            log "–î—Ä—É–≥–æ–π –ø—Ä–æ—Ü–µ—Å—Å healthcheck —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è (PID: $lock_pid)"
            exit 0
        else
            log "–£–¥–∞–ª—è–µ–º —É—Å—Ç–∞—Ä–µ–≤—à–∏–π lock file"
            rm -f "$lock_file"
        fi
    fi
    
    echo $$ > "$lock_file"
    
    # –í—ã–ø–æ–ª–Ω—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É
    if health_check; then
        monitor_resources
        local exit_code=0
    else
        local exit_code=1
    fi
    
    # –£–¥–∞–ª—è–µ–º lock file
    rm -f "$lock_file"
    
    exit $exit_code
}

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
case "${1:-check}" in
    check)
        main
        ;;
    restart)
        restart_service
        ;;
    reset)
        log "–°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è healthcheck"
        rm -f "$STATE_FILE"
        ;;
    status)
        echo "Failure count: $(get_failure_count)"
        echo "Last restart: $(date -d @$(get_last_restart) 2>/dev/null || echo 'never')"
        ;;
    *)
        echo "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: $0 {check|restart|reset|status}"
        echo "–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è:"
        echo "  RESTART_THRESHOLD - –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ—É–¥–∞—á –¥–ª—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 3)"
        echo "  RESTART_COOLDOWN - –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –º–µ–∂–¥—É –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–º–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 300)"
        exit 1
        ;;
esac 